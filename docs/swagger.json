{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/document": {
            "post": {
                "description": "Create a new document that belongs to the author; the author has to be a existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Create document",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateDocument.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateDocument.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateDocument.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateDocument.failedResponseBody"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the document; the user should have authorization to delete.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Delete document",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteDocument.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteDocument.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteDocument.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteDocument.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/document/add/viewer": {
            "post": {
                "description": "Add a viewer to the document; the viewer has to be a existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Add viewer",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.AddViewer.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.AddViewer.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.AddViewer.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.AddViewer.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/document/content": {
            "post": {
                "description": "Get the document content; the user should have authorization to get the content.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get document content",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentContent.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentContent.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentContent.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentContent.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/document/histories": {
            "post": {
                "description": "Get all histories of the document; the document has to exist, and the user has to have permission to view such document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get document histories",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentHistories.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentHistories.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentHistories.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetDocumentHistories.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/document/update": {
            "put": {
                "description": "Update a document that belongs to the author; the author has to be a existing user. if no approver yet, approver_id should be 0.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Update document",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateDocument.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateDocument.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateDocument.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateDocument.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/document/update/status": {
            "put": {
                "description": "Set the status of the document; the approver has to be a existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Set document status",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SetDocumentStatus.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.SetDocumentStatus.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.SetDocumentStatus.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.SetDocumentStatus.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/documents/author": {
            "post": {
                "description": "Get all documents that belong to the author; the author has to be a existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get author documents",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.GetAuthorDocuments.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetAuthorDocuments.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetAuthorDocuments.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetAuthorDocuments.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/documents/viewer": {
            "post": {
                "description": "Get all documents that belong to the viewer; the viewer has to be a existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "Get viewer documents",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.GetViewerDocuments.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetViewerDocuments.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetViewerDocuments.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetViewerDocuments.failedResponseBody"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.CheckHealth.responseBody"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login a user with username and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UserLogin.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserLogin.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.invalidResponseBody"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserLogin.userNotFoundResponseBody"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user; the user will be created with the identity \"user\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UserCreate.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserCreate.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserCreate.existedResponseBody"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Get users with the same given username.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get users by username",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.GetUsersByUsername.requestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetUsersByUsername.successResponseBody"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.invalidResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetUsersByUsername.unexpectedErrorResponseBody"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AddViewer.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to add viewer to the document"
                }
            }
        },
        "controllers.AddViewer.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.AddViewer.requestBody": {
            "type": "object",
            "required": [
                "document_id",
                "viewer_id"
            ],
            "properties": {
                "document_id": {
                    "type": "integer",
                    "example": 1
                },
                "viewer_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.AddViewer.successResponseBody": {
            "type": "object"
        },
        "controllers.CreateDocument.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to create document"
                }
            }
        },
        "controllers.CreateDocument.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.CreateDocument.requestBody": {
            "type": "object",
            "required": [
                "author_id"
            ],
            "properties": {
                "author_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.CreateDocument.successResponseBody": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.DeleteDocument.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to delete document"
                }
            }
        },
        "controllers.DeleteDocument.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.DeleteDocument.requestBody": {
            "type": "object",
            "required": [
                "author_id",
                "document_id"
            ],
            "properties": {
                "author_id": {
                    "type": "integer",
                    "example": 1
                },
                "document_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.DeleteDocument.successResponseBody": {
            "type": "object"
        },
        "controllers.GetAuthorDocuments.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to get documents"
                }
            }
        },
        "controllers.GetAuthorDocuments.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.GetAuthorDocuments.requestBody": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.GetAuthorDocuments.successResponseBody": {
            "type": "object",
            "properties": {
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.docDto"
                    }
                }
            }
        },
        "controllers.GetDocumentContent.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to get document content"
                }
            }
        },
        "controllers.GetDocumentContent.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.GetDocumentContent.requestBody": {
            "type": "object",
            "required": [
                "document_id",
                "user_id"
            ],
            "properties": {
                "document_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.GetDocumentContent.successResponseBody": {
            "type": "object",
            "properties": {
                "document": {
                    "$ref": "#/definitions/models.Document"
                }
            }
        },
        "controllers.GetDocumentHistories.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to get document history"
                }
            }
        },
        "controllers.GetDocumentHistories.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.GetDocumentHistories.requestBody": {
            "type": "object",
            "required": [
                "document_id",
                "user_id"
            ],
            "properties": {
                "document_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.GetDocumentHistories.successResponseBody": {
            "type": "object",
            "properties": {
                "histories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.historyDto"
                    }
                }
            }
        },
        "controllers.GetUsersByUsername.requestBody": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "controllers.GetUsersByUsername.successResponseBody": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.UserDto"
                    }
                }
            }
        },
        "controllers.GetUsersByUsername.unexpectedErrorResponseBody": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "Unexpected error"
                }
            }
        },
        "controllers.GetViewerDocuments.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to get documents"
                }
            }
        },
        "controllers.GetViewerDocuments.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.GetViewerDocuments.requestBody": {
            "type": "object",
            "properties": {
                "viewer_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.GetViewerDocuments.successResponseBody": {
            "type": "object",
            "properties": {
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.docDto"
                    }
                }
            }
        },
        "controllers.SetDocumentStatus.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to set document status"
                }
            }
        },
        "controllers.SetDocumentStatus.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.SetDocumentStatus.requestBody": {
            "type": "object",
            "required": [
                "comment",
                "document_id",
                "status"
            ],
            "properties": {
                "approver_id": {
                    "type": "integer",
                    "example": 1
                },
                "comment": {
                    "type": "string",
                    "example": "It looks bad :("
                },
                "document_id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "string",
                    "example": "REJECT"
                }
            }
        },
        "controllers.SetDocumentStatus.successResponseBody": {
            "type": "object"
        },
        "controllers.UpdateDocument.failedResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to update document"
                }
            }
        },
        "controllers.UpdateDocument.invalidResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "controllers.UpdateDocument.requestBody": {
            "type": "object",
            "required": [
                "author_id",
                "content",
                "document_id"
            ],
            "properties": {
                "appendix": {
                    "type": "string",
                    "example": ""
                },
                "approver_id": {
                    "type": "integer",
                    "example": 0
                },
                "author_id": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "Hello, world!"
                },
                "document_id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "string",
                    "example": "EDIT"
                },
                "title": {
                    "type": "string",
                    "example": "Hello"
                }
            }
        },
        "controllers.UpdateDocument.successResponseBody": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "controllers.UserCreate.existedResponseBody": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "User/Email already exists"
                }
            }
        },
        "controllers.UserCreate.requestBody": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "email@mail.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "controllers.UserCreate.successResponseBody": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/controllers.UserDto"
                }
            }
        },
        "controllers.UserDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "email@mail.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "identity": {
                    "type": "string",
                    "example": "user"
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "controllers.UserLogin.requestBody": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "username": {
                    "type": "string",
                    "example": "username"
                }
            }
        },
        "controllers.UserLogin.successResponseBody": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/controllers.UserDto"
                }
            }
        },
        "controllers.UserLogin.userNotFoundResponseBody": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "User not found"
                }
            }
        },
        "controllers.docDto": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer",
                    "example": 1
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-08-01T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "string",
                    "example": "EDIT"
                },
                "title": {
                    "type": "string",
                    "example": "Important Document"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-08-01T00:00:00Z"
                }
            }
        },
        "controllers.historyDto": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string",
                    "example": "It looks bad :("
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-08-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "EDIT"
                }
            }
        },
        "controllers.invalidResponseBody": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "models.Document": {
            "type": "object",
            "properties": {
                "appendix": {
                    "type": "string"
                },
                "approvedDate": {
                    "type": "string"
                },
                "approver": {
                    "$ref": "#/definitions/models.User"
                },
                "approverID": {
                    "description": "foreign keys to User",
                    "type": "integer"
                },
                "author": {
                    "$ref": "#/definitions/models.User"
                },
                "authorID": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "建立時間（由GORM自動管理）",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "description": "EDIT, VERIFY, REJECT, APPROVE",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "description": "最後一次更新時間（由GORM自動管理）",
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identity": {
                    "description": "user, admin",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "router.CheckHealth.responseBody": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}
