definitions:
  controllers.AddViewer.failedResponseBody:
    properties:
      error:
        example: Failed to add viewer to the document
        type: string
    type: object
  controllers.AddViewer.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.AddViewer.requestBody:
    properties:
      document_id:
        example: 1
        type: integer
      viewer_id:
        example: 1
        type: integer
    required:
    - document_id
    - viewer_id
    type: object
  controllers.AddViewer.successResponseBody:
    type: object
  controllers.CreateDocument.failedResponseBody:
    properties:
      error:
        example: Failed to create document
        type: string
    type: object
  controllers.CreateDocument.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.CreateDocument.requestBody:
    properties:
      author_id:
        example: 1
        type: integer
    required:
    - author_id
    type: object
  controllers.CreateDocument.successResponseBody:
    properties:
      document_id:
        example: 1
        type: integer
    type: object
  controllers.DeleteDocument.failedResponseBody:
    properties:
      error:
        example: Failed to delete document
        type: string
    type: object
  controllers.DeleteDocument.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.DeleteDocument.requestBody:
    properties:
      author_id:
        example: 1
        type: integer
      document_id:
        example: 1
        type: integer
    required:
    - author_id
    - document_id
    type: object
  controllers.DeleteDocument.successResponseBody:
    type: object
  controllers.GetApproverDocuments.failedResponseBody:
    properties:
      error:
        example: Failed to get documents
        type: string
    type: object
  controllers.GetApproverDocuments.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetApproverDocuments.requestBody:
    properties:
      approver_id:
        example: 1
        type: integer
    type: object
  controllers.GetApproverDocuments.successResponseBody:
    properties:
      documents:
        items:
          $ref: '#/definitions/controllers.docDto'
        type: array
    type: object
  controllers.GetAuthorDocuments.failedResponseBody:
    properties:
      error:
        example: Failed to get documents
        type: string
    type: object
  controllers.GetAuthorDocuments.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetAuthorDocuments.requestBody:
    properties:
      author_id:
        example: 1
        type: integer
    type: object
  controllers.GetAuthorDocuments.successResponseBody:
    properties:
      documents:
        items:
          $ref: '#/definitions/controllers.docDto'
        type: array
    type: object
  controllers.GetDocumentContent.failedResponseBody:
    properties:
      error:
        example: Failed to get document content
        type: string
    type: object
  controllers.GetDocumentContent.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetDocumentContent.requestBody:
    properties:
      document_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - document_id
    - user_id
    type: object
  controllers.GetDocumentContent.successResponseBody:
    properties:
      document:
        $ref: '#/definitions/models.Document'
    type: object
  controllers.GetDocumentHistories.failedResponseBody:
    properties:
      error:
        example: Failed to get document history
        type: string
    type: object
  controllers.GetDocumentHistories.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetDocumentHistories.requestBody:
    properties:
      document_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - document_id
    - user_id
    type: object
  controllers.GetDocumentHistories.successResponseBody:
    properties:
      histories:
        items:
          $ref: '#/definitions/controllers.historyDto'
        type: array
    type: object
  controllers.GetUsers.successResponseBody:
    properties:
      users:
        items:
          $ref: '#/definitions/controllers.UserDto'
        type: array
    type: object
  controllers.GetUsers.unexpectedErrorResponseBody:
    properties:
      msg:
        example: Unexpected error
        type: string
    type: object
  controllers.GetUsersByUsername.requestBody:
    properties:
      username:
        example: username
        type: string
    required:
    - username
    type: object
  controllers.GetUsersByUsername.successResponseBody:
    properties:
      users:
        items:
          $ref: '#/definitions/controllers.UserDto'
        type: array
    type: object
  controllers.GetUsersByUsername.unexpectedErrorResponseBody:
    properties:
      msg:
        example: Unexpected error
        type: string
    type: object
  controllers.GetVerifyDocuments.failedResponseBody:
    properties:
      error:
        example: Failed to get documents
        type: string
    type: object
  controllers.GetVerifyDocuments.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetVerifyDocuments.requestBody:
    properties:
      user_id:
        example: 1
        type: integer
    type: object
  controllers.GetVerifyDocuments.successResponseBody:
    properties:
      documents:
        items:
          $ref: '#/definitions/controllers.docDto'
        type: array
    type: object
  controllers.SetDocumentStatus.failedResponseBody:
    properties:
      error:
        example: Failed to set document status
        type: string
    type: object
  controllers.SetDocumentStatus.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.SetDocumentStatus.requestBody:
    properties:
      approver_id:
        example: 1
        type: integer
      comment:
        example: It looks bad :(
        type: string
      document_id:
        example: 1
        type: integer
      status:
        example: REJECT
        type: string
    required:
    - comment
    - document_id
    - status
    type: object
  controllers.SetDocumentStatus.successResponseBody:
    type: object
  controllers.UpdateDocument.failedResponseBody:
    properties:
      error:
        example: Failed to update document
        type: string
    type: object
  controllers.UpdateDocument.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.UpdateDocument.requestBody:
    properties:
      appendix:
        example: ""
        type: string
      approver_id:
        example: 0
        type: integer
      author_id:
        example: 1
        type: integer
      content:
        example: Hello, world!
        type: string
      document_id:
        example: 1
        type: integer
      status:
        example: EDIT
        type: string
      title:
        example: Hello
        type: string
    required:
    - author_id
    - content
    - document_id
    type: object
  controllers.UpdateDocument.successResponseBody:
    properties:
      document_id:
        example: 1
        type: integer
    type: object
  controllers.UserCreate.existedResponseBody:
    properties:
      msg:
        example: User/Email already exists
        type: string
    type: object
  controllers.UserCreate.requestBody:
    properties:
      email:
        example: email@mail.com
        type: string
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.UserCreate.successResponseBody:
    properties:
      user:
        $ref: '#/definitions/controllers.UserDto'
    type: object
  controllers.UserDto:
    properties:
      email:
        example: email@mail.com
        type: string
      id:
        example: 1
        type: integer
      identity:
        example: user
        type: string
      username:
        example: username
        type: string
    type: object
  controllers.UserLogin.requestBody:
    properties:
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    required:
    - password
    - username
    type: object
  controllers.UserLogin.successResponseBody:
    properties:
      user:
        $ref: '#/definitions/controllers.UserDto'
    type: object
  controllers.UserLogin.userNotFoundResponseBody:
    properties:
      msg:
        example: User not found
        type: string
    type: object
  controllers.docDto:
    properties:
      author_id:
        example: 1
        type: integer
      created_at:
        example: "2021-08-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      status:
        example: EDIT
        type: string
      title:
        example: Important Document
        type: string
      updated_at:
        example: "2021-08-01T00:00:00Z"
        type: string
    type: object
  controllers.historyDto:
    properties:
      comment:
        example: It looks bad :(
        type: string
      created_at:
        example: "2021-08-01T00:00:00Z"
        type: string
      status:
        example: EDIT
        type: string
    type: object
  controllers.invalidResponseBody:
    properties:
      msg:
        example: Invalid request body
        type: string
    type: object
  models.Document:
    properties:
      appendix:
        type: string
      approvedDate:
        type: string
      approver:
        $ref: '#/definitions/models.User'
      approverID:
        description: foreign keys to User
        type: integer
      author:
        $ref: '#/definitions/models.User'
      authorID:
        type: integer
      comment:
        type: string
      content:
        type: string
      createdAt:
        description: 建立時間（由GORM自動管理）
        type: string
      id:
        type: integer
      status:
        description: EDIT, VERIFY, REJECT, APPROVE
        type: string
      title:
        type: string
      updatedAt:
        description: 最後一次更新時間（由GORM自動管理）
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      identity:
        description: user, admin
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  router.CheckHealth.responseBody:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /document:
    delete:
      consumes:
      - application/json
      description: Delete the document; the user should have authorization to delete.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.DeleteDocument.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DeleteDocument.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.DeleteDocument.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.DeleteDocument.failedResponseBody'
      summary: Delete document
      tags:
      - Document
    post:
      consumes:
      - application/json
      description: Create a new document that belongs to the author; the author has
        to be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateDocument.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CreateDocument.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.CreateDocument.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.CreateDocument.failedResponseBody'
      summary: Create document
      tags:
      - Document
  /document/add/viewer:
    post:
      consumes:
      - application/json
      description: Add a viewer to the document; the viewer has to be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.AddViewer.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AddViewer.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.AddViewer.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.AddViewer.failedResponseBody'
      summary: Add viewer
      tags:
      - Document
  /document/content:
    post:
      consumes:
      - application/json
      description: Get the content of the document.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetDocumentContent.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetDocumentContent.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetDocumentContent.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetDocumentContent.failedResponseBody'
      summary: Get document content
      tags:
      - Document
  /document/histories:
    post:
      consumes:
      - application/json
      description: Get all histories of the document; the document has to exist, and
        the user has to have permission to view such document.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetDocumentHistories.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetDocumentHistories.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetDocumentHistories.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetDocumentHistories.failedResponseBody'
      summary: Get document histories
      tags:
      - Document
  /document/update:
    put:
      consumes:
      - application/json
      description: Update a document that belongs to the author; the author has to
        be a existing user. if no approver yet, approver_id should be 0.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateDocument.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateDocument.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.UpdateDocument.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.UpdateDocument.failedResponseBody'
      summary: Update document
      tags:
      - Document
  /document/update/status:
    put:
      consumes:
      - application/json
      description: Set the status of the document; the approver has to be a existing
        user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.SetDocumentStatus.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SetDocumentStatus.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.SetDocumentStatus.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.SetDocumentStatus.failedResponseBody'
      summary: Set document status
      tags:
      - Document
  /documents/approver:
    post:
      consumes:
      - application/json
      description: Get all documents that need to be approved by the approver; the
        approver has to be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetApproverDocuments.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetApproverDocuments.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetApproverDocuments.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetApproverDocuments.failedResponseBody'
      summary: Get approver documents
      tags:
      - Document
  /documents/author:
    post:
      consumes:
      - application/json
      description: Get all documents that belong to the author; the author has to
        be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetAuthorDocuments.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetAuthorDocuments.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetAuthorDocuments.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetAuthorDocuments.failedResponseBody'
      summary: Get author documents
      tags:
      - Document
  /documents/verify:
    post:
      consumes:
      - application/json
      description: Get all documents that has been verified, thus can be viewed by
        any user; if the user is an admin, return all documents instead.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetVerifyDocuments.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetVerifyDocuments.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetVerifyDocuments.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetVerifyDocuments.failedResponseBody'
      summary: Get verify documents
      tags:
      - Document
  /health:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.CheckHealth.responseBody'
      summary: Check health
      tags:
      - Health
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserLogin.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserLogin.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.invalidResponseBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.UserLogin.userNotFoundResponseBody'
      summary: Login a user
      tags:
      - User
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user; the user will be created with the identity "user".
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserCreate.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserCreate.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.UserCreate.existedResponseBody'
      summary: Create a user
      tags:
      - User
  /users:
    get:
      consumes:
      - application/json
      description: Get all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUsers.successResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetUsers.unexpectedErrorResponseBody'
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Get users with the same given username.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetUsersByUsername.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUsersByUsername.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetUsersByUsername.unexpectedErrorResponseBody'
      summary: Get users by username
      tags:
      - User
swagger: "2.0"
