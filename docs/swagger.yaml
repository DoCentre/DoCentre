definitions:
  controllers.AddViewer.failedResponseBody:
    properties:
      error:
        example: Failed to add viewer to the document
        type: string
    type: object
  controllers.AddViewer.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.AddViewer.requestBody:
    properties:
      document_id:
        example: 1
        type: integer
      viewer_id:
        example: 1
        type: integer
    required:
    - document_id
    - viewer_id
    type: object
  controllers.AddViewer.successResponseBody:
    type: object
  controllers.CreateDocument.failedResponseBody:
    properties:
      error:
        example: Failed to create document
        type: string
    type: object
  controllers.CreateDocument.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.CreateDocument.requestBody:
    properties:
      author_id:
        example: 1
        type: integer
    required:
    - author_id
    type: object
  controllers.CreateDocument.successResponseBody:
    properties:
      document_id:
        example: 1
        type: integer
    type: object
  controllers.GetAuthorDocuments.failedResponseBody:
    properties:
      error:
        example: Failed to get documents
        type: string
    type: object
  controllers.GetAuthorDocuments.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetAuthorDocuments.requestBody:
    properties:
      author_id:
        example: 1
        type: integer
    type: object
  controllers.GetAuthorDocuments.successResponseBody:
    properties:
      documents:
        items:
          $ref: '#/definitions/controllers.docDto'
        type: array
    type: object
  controllers.GetUsersByUsername.requestBody:
    properties:
      username:
        example: username
        type: string
    required:
    - username
    type: object
  controllers.GetUsersByUsername.successResponseBody:
    properties:
      users:
        items:
          $ref: '#/definitions/controllers.UserDto'
        type: array
    type: object
  controllers.GetUsersByUsername.usersNotFoundResponseBody:
    properties:
      msg:
        example: Users not found
        type: string
    type: object
  controllers.GetViewerDocuments.failedResponseBody:
    properties:
      error:
        example: Failed to get documents
        type: string
    type: object
  controllers.GetViewerDocuments.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.GetViewerDocuments.requestBody:
    properties:
      viewer_id:
        example: 1
        type: integer
    type: object
  controllers.GetViewerDocuments.successResponseBody:
    properties:
      documents:
        items:
          $ref: '#/definitions/controllers.docDto'
        type: array
    type: object
  controllers.UpdateDocument.failedResponseBody:
    properties:
      error:
        example: Failed to update document
        type: string
    type: object
  controllers.UpdateDocument.invalidResponseBody:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  controllers.UpdateDocument.requestBody:
    properties:
      appendix:
        example: ""
        type: string
      approver_id:
        example: 0
        type: integer
      author_id:
        example: 1
        type: integer
      content:
        example: Hello, world!
        type: string
      document_id:
        example: 1
        type: integer
      status:
        example: EDIT
        type: string
      title:
        example: Hello
        type: string
    required:
    - author_id
    - content
    - document_id
    type: object
  controllers.UpdateDocument.successResponseBody:
    properties:
      document_id:
        example: 1
        type: integer
    type: object
  controllers.UserCreate.existedResponseBody:
    properties:
      msg:
        example: User/Email already exists
        type: string
    type: object
  controllers.UserCreate.requestBody:
    properties:
      email:
        example: email@mail.com
        type: string
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.UserCreate.successResponseBody:
    properties:
      user:
        $ref: '#/definitions/controllers.UserDto'
    type: object
  controllers.UserDto:
    properties:
      email:
        example: email@mail.com
        type: string
      id:
        example: 1
        type: integer
      identity:
        example: user
        type: string
      username:
        example: username
        type: string
    type: object
  controllers.UserLogin.requestBody:
    properties:
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    required:
    - password
    - username
    type: object
  controllers.UserLogin.successResponseBody:
    properties:
      user:
        $ref: '#/definitions/controllers.UserDto'
    type: object
  controllers.UserLogin.userNotFoundResponseBody:
    properties:
      msg:
        example: User not found
        type: string
    type: object
  controllers.docDto:
    properties:
      author_id:
        example: 1
        type: integer
      created_at:
        example: "2021-08-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      status:
        example: EDIT
        type: string
      title:
        example: Important Document
        type: string
      updated_at:
        example: "2021-08-01T00:00:00Z"
        type: string
    type: object
  controllers.invalidResponseBody:
    properties:
      msg:
        example: Invalid request body
        type: string
    type: object
  router.CheckHealth.responseBody:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /document:
    post:
      consumes:
      - application/json
      description: Create a new document that belongs to the author; the author has
        to be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateDocument.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CreateDocument.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.CreateDocument.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.CreateDocument.failedResponseBody'
      summary: Create document
      tags:
      - Document
  /document/add/viewer:
    post:
      consumes:
      - application/json
      description: Add a viewer to the document; the viewer has to be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.AddViewer.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AddViewer.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.AddViewer.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.AddViewer.failedResponseBody'
      summary: Add viewer
      tags:
      - Document
  /document/update:
    put:
      consumes:
      - application/json
      description: Update a document that belongs to the author; the author has to
        be a existing user. if no approver yet, approver_id should be 0.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateDocument.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateDocument.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.UpdateDocument.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.UpdateDocument.failedResponseBody'
      summary: Update document
      tags:
      - Document
  /documents/author:
    post:
      consumes:
      - application/json
      description: Get all documents that belong to the author; the author has to
        be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetAuthorDocuments.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetAuthorDocuments.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetAuthorDocuments.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetAuthorDocuments.failedResponseBody'
      summary: Get author documents
      tags:
      - Document
  /documents/viewer:
    post:
      consumes:
      - application/json
      description: Get all documents that belong to the viewer; the viewer has to
        be a existing user.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetViewerDocuments.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetViewerDocuments.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.GetViewerDocuments.invalidResponseBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.GetViewerDocuments.failedResponseBody'
      summary: Get viewer documents
      tags:
      - Document
  /health:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.CheckHealth.responseBody'
      summary: Check health
      tags:
      - Health
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserLogin.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserLogin.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.invalidResponseBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.UserLogin.userNotFoundResponseBody'
      summary: Login a user
      tags:
      - User
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user; the user will be created with the identity "user".
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserCreate.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserCreate.successResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.UserCreate.existedResponseBody'
      summary: Create a user
      tags:
      - User
  /users:
    post:
      consumes:
      - application/json
      description: Get users with the same given username.
      parameters:
      - description: ' '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GetUsersByUsername.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetUsersByUsername.usersNotFoundResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.invalidResponseBody'
      summary: Get users by username
      tags:
      - User
swagger: "2.0"
